// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"context"
	"github.com/libmonsoon-dev/fasthttp-template/app"
	"github.com/libmonsoon-dev/fasthttp-template/app/apperr"
	"github.com/libmonsoon-dev/fasthttp-template/app/domain"
	"github.com/libmonsoon-dev/fasthttp-template/app/entrypoint"
	"github.com/libmonsoon-dev/fasthttp-template/app/infrastructure/config"
	"github.com/libmonsoon-dev/fasthttp-template/app/infrastructure/logger"
	"github.com/libmonsoon-dev/fasthttp-template/app/infrastructure/server"
	"github.com/libmonsoon-dev/fasthttp-template/app/interface/http"
	"github.com/libmonsoon-dev/fasthttp-template/app/interface/http/rest"
	"github.com/libmonsoon-dev/fasthttp-template/app/service"
	"sync"
)

// Injectors from wire.go:

func CreateApp() (app.App, error) {
	context := app.NewContext()
	appConfig, err := config.EnvironmentProvider()
	if err != nil {
		return app.App{}, err
	}
	waitGroup := _wireWaitGroupValue
	logLogger := logger.NewStderrLogger()
	diRepo := newRepo()
	userService := service.NewUserService(logLogger, diRepo)
	authService := service.NewAuthService(logLogger, userService)
	authEntrypoint := entrypoint.NewAuthEntrypoint(logLogger, authService)
	authController := rest.NewAuthController(logLogger, authEntrypoint)
	controller := rest.NewController(authController)
	requestHandler := http.NewController(controller)
	fasthttpServer := server.New(logLogger, requestHandler)
	appApp := app.NewApp(context, appConfig, waitGroup, logLogger, fasthttpServer)
	return appApp, nil
}

var (
	_wireWaitGroupValue = &sync.WaitGroup{}
)

// wire.go:

func newRepo() *repo {
	r := make(repo, 0)
	return &r
}

type repo []domain.User

func (r *repo) Store(ctx context.Context, user domain.User) (id int, err error) {
	id = len(*r)
	user.ID = id
	*r = append(*r, user)
	return
}

func (r repo) FindById(ctx context.Context, id int) (domain.User, error) {
	for _, user := range r {
		if user.ID == id {
			return user, nil
		}
	}

	if id < len(r) {
		return r[id], nil
	}
	return domain.User{}, apperr.ErrItemNotFound
}

func (r repo) FindByEmail(ctx context.Context, email string) (domain.User, error) {
	for _, user := range r {
		if user.Email == email {
			return user, nil
		}
	}
	return domain.User{}, apperr.ErrItemNotFound
}
